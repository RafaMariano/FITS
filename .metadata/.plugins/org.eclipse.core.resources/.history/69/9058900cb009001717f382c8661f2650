package br.inpe.log;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import br.inpe.model.FileSystem;
import nom.tam.fits.Fits;

public class Log {

	private Path path;
	private ArrayList<String> listZero;
	public Log(String path) throws IOException {

		this.path = Paths.get(path);
		this.listZero = new ArrayList<>();
		
		if (Files.notExists(this.path, LinkOption.NOFOLLOW_LINKS))
			Files.createFile(this.path);
	}

	public void verificacao() throws IOException {
		
		List<String> lines;
		lines = Files.readAllLines(path);
		int size = lines.size() - 1;
		
		if (size > -1) {
			
			FileSystemResult result = FileSystemResult.convert(lines.get(size));
			
			if (result != null){
				
			switch (result) {
			case CREATE_SUCCESSFUL:
				System.out.println("a");
				break;
			case MOVE_SUCCESSFUL:
				System.out.println("b");
				break;
			case DELETE_SUCCESSFUL:
				System.out.println("c");
				break;
			}
		}
			else{
				deleteLog();
			}
	}
}
	
	private void getVerifyCreate(String imagePath, String destinationPath){
		
		if(Files.exists(Paths.get(imagePath), LinkOption.NOFOLLOW_LINKS)){
			
			try{
				Fits fits = new Fits(imagePath);
				long i = fits.getHDU(0).getHeader().getLongValue("SIZE");
				
				if (Files.size(Paths.get(imagePath)) == i){
					
					ArrayList<String> paths = getDestinationPath(new StringBuilder(destinationPath),new StringBuilder(principalPath));
					
					FileSystem.getInstance().createDir(imagePath, paths.get(1), paths.get(0));
				}
			
			}catch(){}
		
		}else if (Files.exists(Paths.get(destinationPath), LinkOption.NOFOLLOW_LINKS)){
			
		}
		
	}
	
	private ArrayList<String> getDestinationPath(StringBuilder destinatioPath, StringBuilder principalPath){
		
		int lastIndexOfDestination = destinatioPath.lastIndexOf("/");
		int lastIndexOfPrincipal = principalPath.lastIndexOf("/");
		
		if (destinatioPath.substring(lastIndexOfDestination).
				equals(principalPath.substring(lastIndexOfPrincipal)) == false){
			
			ArrayList<String> paths = new ArrayList<>();
			paths.add(principalPath.toString());
			paths.add(destinatioPath.toString());
			return paths;
		}
			
		
		 destinatioPath.setLength(lastIndexOfDestination);
		 principalPath.setLength(lastIndexOfPrincipal);
		 
		return getDestinationPath(destinatioPath, principalPath);
	}
	public void setLogPathOriginalAndDestination(String pathOriginal, String pathDestination) {

		try {

			List<String> lines = Files.readAllLines(path);
			lines.add(Integer.toString(Paths.get(pathOriginal).hashCode()));
			lines.add(pathOriginal);
			lines.add(pathDestination);
			Files.write(path, lines);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void deleteLog() throws IOException {
		
		Files.write(this.path, this.listZero);
	}

	public void setLogSucessful(FileSystemResult type) {

		try {

			List<String> lines = Files.readAllLines(path);
			lines.add(type.toString());
			Files.write(path, lines);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}
