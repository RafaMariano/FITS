package br.inpe.log;

import java.io.IOException;
import java.nio.file.DirectoryNotEmptyException;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import br.inpe.model.FileSystem;
import br.inpe.model.ImagesCollection;
import nom.tam.fits.Fits;
import nom.tam.fits.FitsException;

public class Verify {
	private Path pathCorrupted;
	private Path log;
	
	public Verify(String pathCorrupted, String log) throws IOException{
		this.pathCorrupted = Paths.get(pathCorrupted);
		this.log = Paths.get(log);
		if (Files.notExists(this.log, LinkOption.NOFOLLOW_LINKS))
			Files.createFile(this.log);
	}
	
	
	public ImagesCollection verify() throws IOException {

		List<String> lines = FileSystem.getInstance().getLog();
		int size = lines.size() - 1;

		if (size > -1) {

			FileSystemResult result = FileSystemResult.convert(lines.get(size));

			if (result != null) {

				switch (result) {
				case CREATE_SUCCESSFUL:
					
					System.out.println("a");
					break;
				case MOVE_SUCCESSFUL:
					System.out.println("b");
					break;
				case DELETE_SUCCESSFUL:
					System.out.println("c");
					break;
				}
			} else {
					//deleteLog();
			}
		}
		return null;
	}

	private String getVerifyCreate(String imagePath, String destinationPath) throws  IOException {

		if(Files.exists(Paths.get(imagePath), LinkOption.NOFOLLOW_LINKS)){

			try{
				Fits fits = new Fits(imagePath);
				long size = fits.getHDU(0).getHeader().getLongValue("SIZE");

				if (Files.size(Paths.get(imagePath)) == size){

					ArrayList<String> paths = getDestinationPath(new StringBuilder(destinationPath),new StringBuilder(imagePath));
					FileSystem.getInstance().createDir(imagePath, paths.get(1), paths.get(0));
					FileSystem.getInstance().moveFile(imagePath, destinationPath);
					FileSystem.getInstance().deletePath(imagePath.substring(0, 
							imagePath.lastIndexOf("/")), paths.get(0));
					fits.close();
					return destinationPath;
			
				}else{
					
					FileSystem.getInstance().moveFile(imagePath, this.pathCorrupted.toString());
					fits.close();
				}
			}catch (IOException | FitsException e) {
				StringBuilder st = new StringBuilder(this.pathCorrupted.toString());
				st.append(imagePath.substring(imagePath.lastIndexOf("/")-1));
				FileSystem.getInstance().moveFile(imagePath, st.toString());
			}

		}else if (Files.exists(Paths.get(destinationPath), LinkOption.NOFOLLOW_LINKS)){

		}
		return destinationPath;
	}

	public ArrayList<String> getDestinationPath(StringBuilder destinatioPath, StringBuilder principalPath) {

		int lastIndexOfDestination = destinatioPath.lastIndexOf("/");
		int lastIndexOfPrincipal = principalPath.lastIndexOf("/");

		if (destinatioPath.substring(lastIndexOfDestination)
				.equals(principalPath.substring(lastIndexOfPrincipal)) == false) {

			ArrayList<String> paths = new ArrayList<>();
			paths.add(principalPath.toString());
			paths.add(destinatioPath.toString());
			return paths;
		}

		destinatioPath.setLength(lastIndexOfDestination);
		principalPath.setLength(lastIndexOfPrincipal);

		return getDestinationPath(destinatioPath, principalPath);
	}

}
