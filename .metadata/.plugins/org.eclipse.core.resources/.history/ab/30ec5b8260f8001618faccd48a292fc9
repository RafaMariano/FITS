package br.inpe.controller;

import java.io.IOException;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.PathSegment;
import javax.ws.rs.core.Response;

import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.map.JsonMappingException;

import br.inpe.database.Query;
import br.inpe.model.Date;

@Path("/images")
public class ComputerProcessor {
	
	//retorna os id de todas as imagens paginado
	@GET
	@Path("{page: \\d+}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getCountryById(@PathParam("page") int page) throws JsonGenerationException, JsonMappingException, JsonParseException, IOException {
		return Response.ok(Query.findAll(page)).build();
		//return Query.findOne(id).toString();
	}
	
	//retorna os dados da imagem, passando o ID dela
	@GET
	@Path("/id/{id}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getImageInf(@PathParam("id") String id) throws JsonGenerationException, JsonMappingException, JsonParseException, IOException {
//		return Query.findOne(id);
	return Response.ok(Query.findOne(id)).build();
	}

	
	@GET		 //list
	@Path("/date/{month}/{day}/{year}/{page}")
	@Produces(MediaType.APPLICATION_JSON)
	 public Response echoInputList(@PathParam("day") int day, @PathParam("month") int month, @PathParam("year") int year, @PathParam("page") int page) throws JsonGenerationException, JsonMappingException, JsonParseException, IOException {
		
		return Response.ok(Query.findAllOfDay(month,day, year, page)).build();
	}
	
	@GET
	@Path("/date/{month}/{day}/{year}/time/{hour}/{minute}/{second}/{page}")
	@Produces(MediaType.APPLICATION_JSON)
	 public Response echoInputList(@PathParam("day") int day, @PathParam("month") int month, @PathParam("year") int year,  @PathParam("hour") int hour, 
			 @PathParam("minute") int minute, @PathParam("second") int second, @PathParam("page") int page) throws JsonGenerationException, JsonMappingException, JsonParseException, IOException {
		
		return Response.ok(Query.findAllOfDayWithTime(month, day, year, hour, minute, second, page)).build();
  
	}
	
	@GET
	@Path("/date/{month}/{day}/{year}/time/{hour}/{minute}/{page}")
	@Produces(MediaType.APPLICATION_JSON)
	 public Response echoInputList(@PathParam("day") int day, @PathParam("month") int month, @PathParam("year") int year,  @PathParam("hour") int hour, 
			 @PathParam("minute") int minute, @PathParam("page") int page) throws JsonGenerationException, JsonMappingException, JsonParseException, IOException {
		
		return Response.ok(Query.findAllOfDayWithTime(month, day, year, hour, minute, page)).build();
  
	}
	
	@GET
	@Path("/date/{month}/{day}/{year}/time/{hour}/{page}")
	@Produces(MediaType.APPLICATION_JSON)
	 public Response echoInputList(@PathParam("day") int day, @PathParam("month") int month, @PathParam("year") int year,  @PathParam("hour") int hour, 
			 @PathParam("page") int page) throws JsonGenerationException, JsonMappingException, JsonParseException, IOException {
		
		return Response.ok(Query.findAllOfDayWithTime(month, day, year, hour, page)).build();
  
	}

	@GET
	@Path("/date/{second}/cycle/{cycle}/{page}")
	@Produces(MediaType.APPLICATION_JSON)
	 public Response echoInputList(@PathParam("second") int second, @PathParam("cycle") PathSegment pathSegment, @PathParam("page") int page) throws JsonGenerationException, JsonMappingException, JsonParseException, IOException {
		
		if (Integer.parseInt(pathSegment.toString())){}

		 Set<String> ids = pathSegment.getMatrixParameters().keySet();
		
		// System.out.println(ids.contains("1"));
		 for(Object a :ids.toArray()){
	//		 System.out.println(a);
		 }
		//return Response.ok(Query.findAllOfDayWithTime(month, day, year, hour, minute, second, page)).build();
		 return Response.ok().build();
	}
	
}
